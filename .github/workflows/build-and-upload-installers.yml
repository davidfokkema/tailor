name: build-and-upload-installers
on:
  release:
    types: [published]
  push:
    branches:
      main
jobs:
  build-and-upload-installer:
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: macos-latest
            filename: dist/Tailor-*.dmg
          - os: windows-latest
            filename: dist/*.msi
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Import signing certificates on macOS
        if: matrix.os == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_ID: ${{ secrets.CERTIFICATE_ID }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          BRIEFCASE_PASSWORD: ${{ secrets.BRIEFCASE_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # store app-specific password for notarization
          xcrun notarytool store-credentials "briefcase-macOS-$TEAM_ID" --apple-id "$APPLE_ID" --team-id $TEAM_ID --password $BRIEFCASE_PASSWORD

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - run: python -m pip install briefcase
      - run: briefcase create
      - run: python pruner.py
      - run: briefcase build

      - name: package briefcase app for Windows
        if: matrix.os == 'windows-latest'
        run: briefcase package
      - name: package briefcase app for macOS
        if: matrix.os == 'macos-latest'
        env:
            CERTIFICATE_ID: ${{ secrets.CERTIFICATE_ID }}
        run: |
          briefcase package -i "$CERTIFICATE_ID" 

      - name: upload installer artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ matrix.filename }}
          
      - name: upload assets to release page
        if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file_glob: true
          file: ${{ matrix.filename }}
          tag: ${{ github.ref }}
